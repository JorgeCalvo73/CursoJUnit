package com.healthycoderapp;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

class BMICalculatorTest {
	
	@BeforeAll
	static void beforeAll() {
		System.out.println("Before all unit tests");
	}

	@Test
	void should_ReturnTrue_When_DietRecommended() {
		
		//given - Arrange
		double weight = 89.0;
		double height = 1.72;
		
		//when - Act
		boolean recommended = BMICalculator.isDietRecommended(weight, height);
		
		//then - Assert
		assertTrue(recommended);
	}
	
	@Test
	void should_ReturnFalse_When_DietNotRecommended() {
		
		//given - Arrange
		double weight = 50.0;
		double height = 1.92;
		
		//when - Act
		boolean recommended = BMICalculator.isDietRecommended(weight, height);
		
		//then - Assert
		assertFalse(recommended);
	}
	
	@Test
	void should_ThrowArithmeticException_When_DietNotRecommended() {
		
		// Para comprobar el funcionamiento de una excepción, necesitamos un executable
		
		//given - Arrange
		double weight = 50.0;
		double height = 0.0;
		
		//when - Act
		// Requiere una lambda
		Executable executable = () -> BMICalculator.isDietRecommended(weight, height);
		
		//then - Assert
		assertThrows(ArithmeticException.class, executable);
		
	}
	
	@Test
	void should_ReturnCoderWithWorstBMI_When_CoderListNotEmpty() {
		
		//given - Arrange
		List<Coder> coders = new ArrayList<>();
		coders.add(new Coder(1.80, 60.0));
		coders.add(new Coder(1.82, 98.0));
		coders.add(new Coder(1.80, 64.7));

				
		//when - Act
		Coder coderWorstBMI = BMICalculator.findCoderWithWorstBMI(coders);
		
		//then - Assert
		/* Si falla uno de los asserts, no se comprueba si el siguiente ha fallado.
		 * Para que se compruebe hay que envolver todo en assertAll, el cual necesita que 
		 * le pasemos una lambda por cada assert que quedamos que se compruebe */
		assertAll(
				() -> assertEquals(1.82, coderWorstBMI.getHeight()),
				() -> assertEquals(98.0, coderWorstBMI.getWeight())
		);
		
	}
	
	@Test
	void should_ReturnNullWorstBMI_When_CoderListEmpty() {
		
		//given - Arrange
		List<Coder> coders = new ArrayList<>();
				
		//when - Act
		Coder coderWorstBMI = BMICalculator.findCoderWithWorstBMI(coders);
		
		//then - Assert
		assertNull(coderWorstBMI);
		
	}
	
	@Test
	void should_ReturnCorrectBMIScoreArray_When_CoderListNotEmpty() {
		
		//given - Arrange
		List<Coder> coders = new ArrayList<>();
		coders.add(new Coder(1.80, 60.0));
		coders.add(new Coder(1.82, 98.0));
		coders.add(new Coder(1.82, 64.7));

		double[] expected = {18.52, 29.59, 19.53};
		
		//when - Act
		double[] bmiScores = BMICalculator.getBMIScores(coders);
		
		//then - Assert
		assertArrayEquals(expected, bmiScores);
	}

}
